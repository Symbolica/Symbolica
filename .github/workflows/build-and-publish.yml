name: Build & Publish
on:
  push:
    branches:
    - master
    tags:
    - "*"
  pull_request:
jobs:
  calculate-version:
    runs-on: ubuntu-18.04
    outputs:
      nuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      shortSha: ${{ steps.gitversion.outputs.shortSha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: "5.8.1"
    - name: Run GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.11
  publish-base-images:
    runs-on: ubuntu-18.04
    needs: [calculate-version]
    strategy:
      matrix:
        include:
        - imageName: build
          dockerContext: lib/c/build
        - imageName: translate
          dockerContext: lib/translate
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-${{ matrix.imageName }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.imageName }}-buildx-
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build container
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.dockerContext }}
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: symbolica/${{ matrix.imageName }}:${{ needs.calculate-version.outputs.nuGetVersionV2 }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
  publish-images:
    runs-on: ubuntu-18.04
    needs: [calculate-version, publish-base-images]
    strategy:
      matrix:
        include:
        - imageName: build-cpp
          dockerContext: lib/cpp/build
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-${{ matrix.imageName }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.imageName }}-buildx-
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build container
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.dockerContext }}
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        build-args: BUILD_BASE_IMG_TAG=${{ needs.calculate-version.outputs.nuGetVersionV2 }}
        tags: symbolica/${{ matrix.imageName }}:${{ needs.calculate-version.outputs.nuGetVersionV2 }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
  build-application:
    runs-on: ${{ matrix.os }}
    needs: [calculate-version, publish-base-images]
    strategy:
      matrix:
        include:
        - os: ubuntu-18.04
          setupScript: |
            echo "SYMBOLICA_BUILD_IMAGE=symbolica/build:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
            echo "SYMBOLICA_TRANSLATE_IMAGE=symbolica/translate:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
          nugetPush: true
        - os: ubuntu-20.04
          setupScript: |
            echo "SYMBOLICA_BUILD_IMAGE=symbolica/build:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
            echo "SYMBOLICA_TRANSLATE_IMAGE=symbolica/translate:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
          nugetPush: false
        - os: ubuntu-18.04
          setupScript: |
            sudo ./lib/install-bionic.sh
            ./lib/install-symbolica.sh
          nugetPush: false
        - os: ubuntu-20.04
          setupScript: |
            sudo ./lib/install-focal.sh
            ./lib/install-symbolica.sh
          nugetPush: false
        - os: windows-2022
          setupScript: |
            Invoke-WebRequest -Uri https://wslstorestorage.blob.core.windows.net/wslblob/Ubuntu_1804.2019.522.0_x64.appx -OutFile ubuntu.zip
            Expand-Archive ubuntu.zip
            .\ubuntu\ubuntu1804.exe install --root
            wsl ./lib/install-bionic.sh
            wsl ./lib/install-symbolica.sh
          nugetPush: false
        - os: windows-2022
          setupScript: |
            Invoke-WebRequest -Uri https://wslstorestorage.blob.core.windows.net/wslblob/Ubuntu_2004.2020.424.0_x64.appx -OutFile ubuntu.zip
            Expand-Archive ubuntu.zip
            .\ubuntu\ubuntu2004.exe install --root
            wsl ./lib/install-focal.sh
            wsl ./lib/install-symbolica.sh
          nugetPush: false
        - os: macos-11
          setupScript: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask docker
            sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
            open -a /Applications/Docker.app --args --unattended --accept-license
            while ! /Applications/Docker.app/Contents/Resources/bin/docker info &>/dev/null; do sleep 1; done
            echo "SYMBOLICA_BUILD_IMAGE=symbolica/build:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
            echo "SYMBOLICA_TRANSLATE_IMAGE=symbolica/translate:${{ needs.calculate-version.outputs.nuGetVersionV2 }}" >> $GITHUB_ENV
          nugetPush: false
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        fetch-depth: 0
    - name: Setup dotnet SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.0.101"
    - name: Setup test environment
      run: ${{ matrix.setupScript }}
    - name: Build
      run: |
        version=${{ needs.calculate-version.outputs.nuGetVersionV2 }}
        if [ "${{ github.event_name }}" == "pull_request" ]
        then
            version=${version}-${{ needs.calculate-version.outputs.shortSha }}
        fi
        dotnet build -c Release -p:Version=${version}
      shell: bash
    - name: Test
      run: dotnet test -c Release --no-build
    - name: Archive NuGet Packages
      uses: actions/upload-artifact@v2
      if: ${{ matrix.nugetPush }}
      with:
        name: packages
        path: |
          **/*.nupkg
          **/*.snupkg
        retention-days: 1
  nuget-push:
    runs-on: ubuntu-18.04
    needs: [build-application]
    steps:
    - name: Download NuGet Packages
      uses: actions/download-artifact@v2
      with:
        name: packages
    - name: NuGet Push
      run: dotnet nuget push **/*.nupkg -s https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
